"""
Tests pour le classificateur de vulnérabilités.
"""
import pytest
from unittest.mock import MagicMock, patch
import os

from agents.cybersecurity_agent.classifier import VulnerabilityClassifier

class TestVulnerabilityClassifier:
    """Tests pour le classificateur de vulnérabilités."""
    
    @pytest.fixture
    def mock_pipeline(self):
        """Fixture pour créer un pipeline simulé."""
        mock = MagicMock()
        mock.return_value = [{"label": "sql_injection", "score": 0.95}]
        return mock
    
    def test_classifier_initialization(self, mock_pipeline):
        """Teste l'initialisation du classificateur."""
        with patch('os.path.exists', return_value=True), \
             patch('transformers.pipeline', return_value=mock_pipeline):
            
            classifier = VulnerabilityClassifier(model_path="fake/path")
            
            assert classifier is not None
            assert classifier.model_path == "fake/path"
            assert classifier.classifier is not None
    
    def test_classify_text(self, mock_pipeline):
        """Teste la classification d'un texte."""
        with patch('os.path.exists', return_value=True), \
             patch('transformers.pipeline', return_value=mock_pipeline):
            
            classifier = VulnerabilityClassifier(model_path="fake/path")
            classifier.classifier = mock_pipeline
            
            # Données de test
            text = "Comment puis-je me protéger contre les injections SQL?"
            
            # Classifier le texte
            result = classifier.classify(text)
            
            # Vérifications
            assert result is not None
            assert result["label"] == "sql_injection"
            assert result["score"] == 0.95
    
    def test_classify_with_no_model(self):
        """Teste la classification sans modèle chargé."""
        with patch('os.path.exists', return_value=False):
            classifier = VulnerabilityClassifier(model_path="nonexistent/path")
            
            # Données de test
            text = "Comment puis-je me protéger contre les injections SQL?"
            
            # Classifier le texte
            result = classifier.classify(text)
            
            # Vérifications
            assert result is not None
            assert result["label"] == "unknown"
            assert result["score"] == 0.0
    
    def test_classify_with_error(self, mock_pipeline):
        """Teste la classification avec une erreur."""
        with patch('os.path.exists', return_value=True), \
             patch('transformers.pipeline', return_value=mock_pipeline):
            
            classifier = VulnerabilityClassifier(model_path="fake/path")
            classifier.classifier = MagicMock(side_effect=Exception("Test error"))
            
            # Données de test
            text = "Comment puis-je me protéger contre les injections SQL?"
            
            # Classifier le texte
            result = classifier.classify(text)
            
            # Vérifications
            assert result is not None
            assert result["label"] == "error"
            assert result["score"] == 0.0
