"""
Agent Support Agentic avec RAG + Outils Externes
Combine recherche interne (ChromaDB) et externe (Web, APIs)
"""

import asyncio
import logging
import os
import sys
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
import json

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

# Imports pour RAG
try:
    from sentence_transformers import SentenceTransformer
    import chromadb
    from chromadb.config import Settings
    CHROMADB_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è  ChromaDB non disponible, utilisation du mode fallback")
    CHROMADB_AVAILABLE = False

# Imports pour outils externes
try:
    import requests
    from bs4 import BeautifulSoup
    WEB_TOOLS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è  Outils web non disponibles")
    WEB_TOOLS_AVAILABLE = False

# Configuration
try:
    from config.settings import get_settings
    settings = get_settings()
except ImportError:
    # Configuration fallback
    class FallbackSettings:
        def __init__(self):
            self.OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
            self.HUGGINGFACE_TOKEN = os.getenv("HUGGINGFACE_TOKEN", "")
            self.DEFAULT_EMBEDDING_MODEL = "BAAI/bge-large-en-v1.5"
    
    settings = FallbackSettings()

@dataclass
class QueryResult:
    """R√©sultat d'une requ√™te"""
    content: str
    source: str
    confidence: float
    metadata: Dict[str, Any] = None

class AgenticSupportAgent:
    """
    Agent Support Intelligent avec architecture Agentic RAG
    
    Fonctionnalit√©s:
    - RAG interne (ChromaDB + BGE-Large-EN)
    - Recherche web externe
    - Routage intelligent des requ√™tes
    - Combinaison de sources multiples
    """
    
    def __init__(self):
        self.logger = self._setup_logger()
        
        # Initialisation des composants
        self.embedding_model = None
        self.chroma_client = None
        self.collection = None
        
        # Seuils de d√©cision
        self.internal_confidence_threshold = 0.7
        self.external_search_threshold = 0.5
        
        self._initialize_components()
    
    def _setup_logger(self):
        """Configure le logger"""
        logger = logging.getLogger("AgenticSupportAgent")
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        
        return logger
    
    def _initialize_components(self):
        """Initialise les composants RAG et outils"""
        try:
            if CHROMADB_AVAILABLE:
                # Mod√®le d'embedding BGE-Large-EN
                self.logger.info("üîÑ Chargement du mod√®le BGE-Large-EN...")
                try:
                    self.embedding_model = SentenceTransformer('BAAI/bge-large-en-v1.5')
                    self.logger.info("‚úÖ Mod√®le BGE-Large-EN charg√©")
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è  Erreur chargement BGE: {e}, utilisation mod√®le alternatif")
                    try:
                        self.embedding_model = SentenceTransformer('all-MiniLM-L6-v2')
                        self.logger.info("‚úÖ Mod√®le alternatif charg√©")
                    except Exception as e2:
                        self.logger.error(f"‚ùå Impossible de charger un mod√®le d'embedding: {e2}")
                
                # Client ChromaDB
                self.logger.info("üîÑ Connexion √† ChromaDB...")
                try:
                    chroma_path = "./data/vector_db/chroma_db"
                    os.makedirs(chroma_path, exist_ok=True)
                    
                    self.chroma_client = chromadb.PersistentClient(
                        path=chroma_path,
                        settings=Settings(anonymized_telemetry=False)
                    )
                    
                    # Collection pour la base de connaissances
                    try:
                        self.collection = self.chroma_client.get_collection("knowledge_base")
                        self.logger.info("‚úÖ Collection ChromaDB trouv√©e")
                    except:
                        self.logger.warning("‚ö†Ô∏è  Collection ChromaDB non trouv√©e, cr√©ation...")
                        self.collection = self.chroma_client.create_collection(
                            name="knowledge_base",
                            metadata={"description": "Base de connaissances NextGen-Agent"}
                        )
                        
                        # Ajouter quelques donn√©es de test
                        self._add_sample_data()
                        
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur ChromaDB: {e}")
            else:
                self.logger.info("üîÑ Mode fallback activ√© (sans ChromaDB)")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur initialisation: {e}")
            self.logger.info("üîÑ Mode fallback complet activ√©")
    
    def _add_sample_data(self):
        """Ajoute des donn√©es d'exemple √† ChromaDB"""
        try:
            sample_docs = [
                {
                    "content": "TeamSquare propose trois plans tarifaires : Starter √† 29‚Ç¨/mois, Professional √† 79‚Ç¨/mois, et Enterprise √† 199‚Ç¨/mois. Chaque plan inclut diff√©rentes fonctionnalit√©s et limites d'utilisateurs.",
                    "metadata": {"source": "pricing", "category": "teamsquare"}
                },
                {
                    "content": "Pour installer l'API TeamSquare, vous devez d'abord cr√©er un compte d√©veloppeur, obtenir vos cl√©s API, puis suivre la documentation d'int√©gration disponible sur notre portail d√©veloppeur.",
                    "metadata": {"source": "documentation", "category": "api"}
                },
                {
                    "content": "TeamSquare offre des fonctionnalit√©s de collaboration en temps r√©el, gestion de projets, chat int√©gr√©, partage de fichiers, et tableaux de bord analytiques pour optimiser la productivit√© des √©quipes.",
                    "metadata": {"source": "features", "category": "teamsquare"}
                },
                {
                    "content": "La s√©curit√© TeamSquare inclut le chiffrement end-to-end, l'authentification √† deux facteurs, la conformit√© GDPR, et des audits de s√©curit√© r√©guliers pour prot√©ger vos donn√©es.",
                    "metadata": {"source": "security", "category": "teamsquare"}
                }
            ]
            
            if self.embedding_model and self.collection:
                for i, doc in enumerate(sample_docs):
                    embedding = self.embedding_model.encode([doc["content"]]).tolist()
                    
                    self.collection.add(
                        embeddings=embedding,
                        documents=[doc["content"]],
                        metadatas=[doc["metadata"]],
                        ids=[f"sample_{i}"]
                    )
                
                self.logger.info(f"‚úÖ {len(sample_docs)} documents d'exemple ajout√©s")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur ajout donn√©es d'exemple: {e}")
    
    async def process_query(self, query: str) -> str:
        """
        Traite une requ√™te avec l'architecture Agentic RAG
        
        Flow:
        1. Analyse de la requ√™te
        2. Recherche RAG interne
        3. Si insuffisant ‚Üí Recherche externe
        4. Combinaison et g√©n√©ration de r√©ponse
        """
        self.logger.info(f"üîç Traitement requ√™te: {query[:50]}...")
        
        try:
            # 1. Analyse de la requ√™te
            query_analysis = await self._analyze_query(query)
            self.logger.info(f"üìä Analyse: {query_analysis}")
            
            # 2. Recherche RAG interne
            internal_results = await self._search_internal_knowledge(query)
            self.logger.info(f"üìö R√©sultats internes: {len(internal_results)}")
            
            # 3. D√©cision de recherche externe
            external_results = []
            if self._should_search_external(query_analysis, internal_results):
                self.logger.info("üåê Recherche externe n√©cessaire")
                external_results = await self._search_external_sources(query)
            
            # 4. Combinaison et g√©n√©ration
            final_response = await self._generate_response(
                query, internal_results, external_results
            )
            
            self.logger.info(f"‚úÖ R√©ponse g√©n√©r√©e ({len(final_response)} chars)")
            return final_response
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur traitement requ√™te: {e}")
            return self._fallback_response(query)
    
    async def _analyze_query(self, query: str) -> Dict[str, Any]:
        """Analyse la requ√™te pour d√©terminer le type et la strat√©gie"""
        
        # Mots-cl√©s pour classification
        internal_keywords = [
            'teamsquare', 'prix', 'tarif', 'fonctionnalit√©', 'api',
            'documentation', 'guide', 'tutoriel', 'installation',
            's√©curit√©', 'collaboration', 'projet'
        ]
        
        external_keywords = [
            'actualit√©', 'nouvelle', 'r√©cent', 'derni√®re', 'aujourd\'hui',
            'microsoft', 'google', 'openai', 'technologie', 'march√©',
            'm√©t√©o', 'temps', 'news'
        ]
        
        query_lower = query.lower()
        
        internal_score = sum(1 for kw in internal_keywords if kw in query_lower)
        external_score = sum(1 for kw in external_keywords if kw in query_lower)
        
        return {
            'type': 'internal' if internal_score > external_score else 'external',
            'internal_score': internal_score,
            'external_score': external_score,
            'requires_real_time': any(kw in query_lower for kw in ['actualit√©', 'r√©cent', 'derni√®re', 'm√©t√©o']),
            'complexity': len(query.split())
        }
    
    async def _search_internal_knowledge(self, query: str) -> List[QueryResult]:
        """Recherche dans la base de connaissances interne"""
        
        if not self.embedding_model or not self.collection:
            self.logger.warning("‚ö†Ô∏è  RAG interne non disponible")
            return []
        
        try:
            # G√©n√©ration de l'embedding
            query_embedding = self.embedding_model.encode([query]).tolist()
            
            # Recherche dans ChromaDB
            results = self.collection.query(
                query_embeddings=query_embedding,
                n_results=5,
                include=['documents', 'metadatas', 'distances']
            )
            
            # Conversion en QueryResult
            query_results = []
            if results['documents'] and results['documents'][0]:
                for i, (doc, metadata, distance) in enumerate(zip(
                    results['documents'][0],
                    results['metadatas'][0] or [{}] * len(results['documents'][0]),
                    results['distances'][0]
                )):
                    confidence = max(0, 1 - distance)  # Distance ‚Üí Confidence
                    
                    query_results.append(QueryResult(
                        content=doc,
                        source="internal_kb",
                        confidence=confidence,
                        metadata=metadata
                    ))
            
            self.logger.info(f"üìö Trouv√© {len(query_results)} r√©sultats internes")
            return query_results
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur recherche interne: {e}")
            return []
    
    def _should_search_external(self, analysis: Dict, internal_results: List[QueryResult]) -> bool:
        """D√©termine si une recherche externe est n√©cessaire"""
        
        # Si pas de r√©sultats internes suffisants
        if not internal_results:
            return True
        
        # Si confiance interne faible
        max_confidence = max((r.confidence for r in internal_results), default=0)
        if max_confidence < self.internal_confidence_threshold:
            return True
        
        # Si requ√™te n√©cessite des infos temps r√©el
        if analysis.get('requires_real_time', False):
            return True
        
        # Si type externe d√©tect√©
        if analysis.get('type') == 'external':
            return True
        
        return False
    
    async def _search_external_sources(self, query: str) -> List[QueryResult]:
        """Recherche dans les sources externes"""
        
        external_results = []
        
        try:
            # Recherche web simple
            web_results = await self._search_web(query)
            external_results.extend(web_results)
            
            self.logger.info(f"üåê Trouv√© {len(external_results)} r√©sultats externes")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur recherche externe: {e}")
        
        return external_results
    
    async def _search_web(self, query: str) -> List[QueryResult]:
        """Recherche web basique"""
        
        try:
            # Pour cette d√©mo, on simule des r√©sultats web
            # En production, utiliser une vraie API de recherche (Google, Bing, etc.)
            
            simulated_results = []
            
            # Simulation bas√©e sur le type de requ√™te
            if any(kw in query.lower() for kw in ['microsoft', 'actualit√©', 'nouvelle']):
                simulated_results.append(QueryResult(
                    content=f"Derni√®res actualit√©s Microsoft : Microsoft continue d'investir massivement dans l'IA avec de nouveaux partenariats et innovations. "
                           f"L'entreprise a r√©cemment annonc√© des am√©liorations significatives √† ses services cloud et IA.",
                    source="web_search",
                    confidence=0.8,
                    metadata={"url": "https://news.microsoft.com", "title": "Microsoft News"}
                ))
            
            elif any(kw in query.lower() for kw in ['m√©t√©o', 'temps']):
                simulated_results.append(QueryResult(
                    content=f"M√©t√©o actuelle : Conditions m√©t√©orologiques variables selon votre localisation. "
                           f"Pour des informations pr√©cises, consultez un service m√©t√©o local.",
                    source="web_search",
                    confidence=0.6,
                    metadata={"url": "https://weather.com", "title": "Weather Info"}
                ))
            
            else:
                simulated_results.append(QueryResult(
                    content=f"Informations web pour '{query}' : Cette recherche n√©cessiterait une connexion "
                           f"√† une API de recherche web r√©elle pour obtenir des r√©sultats actualis√©s.",
                    source="web_search",
                    confidence=0.5,
                    metadata={"url": "https://example.com", "title": "R√©sultat simul√©"}
                ))
            
            return simulated_results
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur recherche web: {e}")
            return []
    
    async def _generate_response(self, query: str, internal_results: List[QueryResult], 
                                external_results: List[QueryResult]) -> str:
        """G√©n√®re la r√©ponse finale en combinant toutes les sources"""
        
        # Combinaison des r√©sultats
        all_results = internal_results + external_results
        
        if not all_results:
            return self._fallback_response(query)
        
        # Tri par confiance
        all_results.sort(key=lambda x: x.confidence, reverse=True)
        
        # Construction de la r√©ponse
        response_parts = []
        
        # Meilleur r√©sultat comme base
        best_result = all_results[0]
        response_parts.append(f"**R√©ponse principale:**\n{best_result.content}")
        
        # Sources additionnelles si pertinentes
        additional_sources = [r for r in all_results[1:3] if r.confidence > 0.5]
        if additional_sources:
            response_parts.append("\n**Informations compl√©mentaires:**")
            for result in additional_sources:
                response_parts.append(f"- {result.content[:200]}...")
        
        # Sources utilis√©es
        sources = list(set(r.source for r in all_results[:3]))
        response_parts.append(f"\n**Sources:** {', '.join(sources)}")
        
        # Confiance globale
        avg_confidence = sum(r.confidence for r in all_results[:3]) / min(3, len(all_results))
        response_parts.append(f"**Confiance:** {avg_confidence:.1%}")
        
        return "\n".join(response_parts)
    
    def _fallback_response(self, query: str) -> str:
        """R√©ponse de fallback quand aucune source n'est disponible"""
        return (
            f"Je comprends votre question sur '{query}', mais je n'ai pas "
            f"suffisamment d'informations dans ma base de connaissances actuelle "
            f"pour vous donner une r√©ponse pr√©cise.\n\n"
            f"**Suggestions:**\n"
            f"- Reformulez votre question avec plus de d√©tails\n"
            f"- Consultez la documentation officielle\n"
            f"- Contactez le support technique pour une assistance personnalis√©e\n\n"
            f"**Sources:** fallback_response"
        )

# Test rapide
async def test_agent():
    """Test rapide de l'agent"""
    print("üß™ TEST RAPIDE AGENT AGENTIC")
    print("-" * 40)
    
    agent = AgenticSupportAgent()
    
    test_queries = [
        "Quels sont les prix de TeamSquare ?",
        "Comment installer l'API ?",
        "Quelles sont les derni√®res nouvelles de Microsoft ?"
    ]
    
    for query in test_queries:
        print(f"\nüîç Test: {query}")
        response = await agent.process_query(query)
        print(f"üìù R√©ponse: {response[:150]}...")

if __name__ == "__main__":
    asyncio.run(test_agent())
