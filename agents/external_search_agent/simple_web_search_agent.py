"""
Agent de recherche externe simplifi√© utilisant DuckDuckGo
"""

import logging
import os
import sys
from datetime import datetime
from typing import Dict, List, Any
import requests
from bs4 import BeautifulSoup
import json

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleWebSearchAgent:
    """Agent de recherche externe simplifi√©"""
    
    def __init__(self):
        self.llm_manager = None
        self._init_llm_manager()
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        logger.info("‚úÖ Agent de recherche externe simplifi√© initialis√©")
    
    def _init_llm_manager(self):
        """Initialiser le LLM"""
        try:
            from utils.hybrid_llm_manager_gemini import HybridLLMManagerGemini
            self.llm_manager = HybridLLMManagerGemini()
            logger.info("‚úÖ LLM initialis√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur LLM: {e}")
            self.llm_manager = None
    
    def get_current_datetime(self) -> str:
        """Obtient la date et l'heure actuelles"""
        now = datetime.now()
        return f"Date: {now.strftime('%d/%m/%Y')}, Heure: {now.strftime('%H:%M:%S')}"
    
    def search_duckduckgo(self, query: str) -> str:
        """Recherche sur DuckDuckGo"""
        try:
            # URL de recherche DuckDuckGo
            search_url = "https://html.duckduckgo.com/html/"
            params = {
                'q': query,
                'kl': 'fr-fr'  # Langue fran√ßaise
            }
            
            response = self.session.get(search_url, params=params, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Extraire les r√©sultats
            results = []
            result_divs = soup.find_all('div', class_='result')[:3]  # Top 3 r√©sultats
            
            for div in result_divs:
                title_elem = div.find('a', class_='result__a')
                snippet_elem = div.find('a', class_='result__snippet')
                
                if title_elem and snippet_elem:
                    title = title_elem.get_text(strip=True)
                    snippet = snippet_elem.get_text(strip=True)
                    results.append(f"‚Ä¢ {title}: {snippet}")
            
            if results:
                return "\n".join(results)
            else:
                return "Aucun r√©sultat trouv√© sur DuckDuckGo"
                
        except Exception as e:
            logger.error(f"‚ùå Erreur recherche DuckDuckGo: {e}")
            return f"Erreur lors de la recherche: {str(e)}"
    
    def search_weather(self, location: str = "Paris") -> str:
        """Recherche m√©t√©o simplifi√©e"""
        try:
            # Utiliser une API m√©t√©o gratuite (OpenWeatherMap n√©cessite une cl√©)
            # Pour la d√©mo, on simule avec une recherche web
            query = f"m√©t√©o {location} aujourd'hui"
            return self.search_duckduckgo(query)
        except Exception as e:
            return f"Erreur recherche m√©t√©o: {str(e)}"
    
    def search_news(self, topic: str = "actualit√©s") -> str:
        """Recherche d'actualit√©s"""
        try:
            query = f"{topic} derni√®res nouvelles"
            return self.search_duckduckgo(query)
        except Exception as e:
            return f"Erreur recherche actualit√©s: {str(e)}"
    
    def search(self, query: str) -> Dict[str, Any]:
        """
        Effectue une recherche externe intelligente
        
        Args:
            query: La requ√™te de recherche
            
        Returns:
            Dict avec la r√©ponse et les m√©tadonn√©es
        """
        try:
            logger.info(f"üîç Recherche externe: {query}")
            
            # Analyser le type de question
            query_lower = query.lower()
            search_results = ""
            sources = []
            
            # Questions de date/heure
            if any(keyword in query_lower for keyword in ['heure', 'date', 'jour', 'mois', 'ann√©e', 'maintenant']):
                search_results = self.get_current_datetime()
                sources = ["Horloge syst√®me"]
            
            # Questions m√©t√©o
            elif any(keyword in query_lower for keyword in ['m√©t√©o', 'temps', 'temp√©rature', 'pluie', 'soleil']):
                # Extraire la ville si mentionn√©e
                location = "Paris"  # Par d√©faut
                if "√† " in query_lower:
                    location = query_lower.split("√† ")[-1].strip()
                elif "de " in query_lower:
                    location = query_lower.split("de ")[-1].strip()
                
                search_results = self.search_weather(location)
                sources = ["DuckDuckGo", "Recherche m√©t√©o"]
            
            # Questions d'actualit√©s
            elif any(keyword in query_lower for keyword in ['actualit√©', 'news', 'nouvelles', 'derni√®res']):
                search_results = self.search_news()
                sources = ["DuckDuckGo", "Actualit√©s"]
            
            # Recherche g√©n√©rale
            else:
                search_results = self.search_duckduckgo(query)
                sources = ["DuckDuckGo"]
            
            # G√©n√©rer une r√©ponse avec Gemini
            if self.llm_manager:
                prompt = f"""Tu es un assistant qui aide √† interpr√©ter les r√©sultats de recherche web.

Question de l'utilisateur: {query}

R√©sultats de recherche:
{search_results}

Instructions:
- R√©ponds de mani√®re naturelle et conversationnelle en fran√ßais
- Utilise les informations trouv√©es pour donner une r√©ponse pr√©cise
- Si les informations sont insuffisantes, dis-le clairement
- Sois concis mais informatif
- Ne mentionne pas que tu es un assistant IA

R√©ponse:"""
                
                response = self.llm_manager.generate(prompt)
            else:
                response = f"Voici les r√©sultats pour '{query}':\n\n{search_results}"
            
            return {
                "success": True,
                "response": response,
                "sources": sources,
                "timestamp": datetime.now().isoformat(),
                "query": query,
                "raw_results": search_results[:500]  # Limiter la taille
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur recherche: {e}")
            return {
                "success": False,
                "response": f"D√©sol√©, je n'ai pas pu effectuer la recherche: {str(e)}",
                "sources": [],
                "timestamp": datetime.now().isoformat(),
                "query": query,
                "error": str(e)
            }

# Test
if __name__ == "__main__":
    agent = SimpleWebSearchAgent()
    
    test_queries = [
        "Quelle heure est-il ?",
        "Quelle est la m√©t√©o √† Paris ?",
        "Qui est le pr√©sident actuel de la France ?",
        "C'est quoi NVIDIA ?"
    ]
    
    for i, query in enumerate(test_queries, 1):
        print(f"\nüîç Test {i}: '{query}'")
        
        result = agent.search(query)
        
        print(f"‚úÖ Succ√®s: {result['success']}")
        print(f"üìù R√©ponse: {result['response'][:200]}...")
        print(f"üìä Sources: {', '.join(result['sources'])}")
