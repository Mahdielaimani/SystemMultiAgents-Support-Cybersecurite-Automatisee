import { type NextRequest, NextResponse } from "next/server"

// Types pour les requ√™tes
interface UnifiedAgentRequest {
  query: string
  agent_type: "support" | "security" | "auto"
  session_id?: string
  target?: string
  scan_type?: string
}

// Simuler les r√©ponses des agents
function getAgentResponse(query: string, agentType: "support" | "security"): any {
  if (agentType === "support") {
    if (query.toLowerCase().includes("prix") || query.toLowerCase().includes("tarif")) {
      return {
        response: `üè∑Ô∏è **Tarifs TeamSquare :**

üí∞ **Starter** : 9‚Ç¨/mois par utilisateur
   ‚Ä¢ Jusqu'√† 10 utilisateurs
   ‚Ä¢ 5GB de stockage
   ‚Ä¢ Support email

üí∞ **Professional** : 19‚Ç¨/mois par utilisateur  
   ‚Ä¢ Utilisateurs illimit√©s
   ‚Ä¢ 100GB de stockage
   ‚Ä¢ Support prioritaire

üí∞ **Enterprise** : Sur devis
   ‚Ä¢ Tout du plan Pro
   ‚Ä¢ Stockage illimit√©
   ‚Ä¢ Support d√©di√©

Lequel vous int√©resse le plus ?`,
        metadata: {
          agent: "support",
          confidence: 0.95,
          source: "pricing_database",
        },
      }
    } else if (query.toLowerCase().includes("fonctionnalit√©") || query.toLowerCase().includes("feature")) {
      return {
        response: `üöÄ **Fonctionnalit√©s TeamSquare :**

**Collaboration :**
‚Ä¢ Chat en temps r√©el
‚Ä¢ Partage de fichiers s√©curis√©
‚Ä¢ Espaces de travail collaboratifs

**Gestion de projet :**
‚Ä¢ Suivi des t√¢ches
‚Ä¢ Planification d'√©quipe
‚Ä¢ Rapports de progression

**Communication :**
‚Ä¢ Visioconf√©rences int√©gr√©es
‚Ä¢ Notifications intelligentes

Quelle fonctionnalit√© vous int√©resse le plus ?`,
        metadata: {
          agent: "support",
          confidence: 0.92,
          source: "features_database",
        },
      }
    } else {
      return {
        response:
          "Bonjour ! üëã Je suis l'assistant TeamSquare. Je peux vous aider avec nos tarifs, fonctionnalit√©s, ou toute question sur notre plateforme de collaboration. Comment puis-je vous aider ?",
        metadata: {
          agent: "support",
          confidence: 0.85,
          source: "general_support",
        },
      }
    }
  } else {
    // Agent de s√©curit√©
    if (query.toLowerCase().includes("scan") || query.toLowerCase().includes("analyser")) {
      return {
        response: `üîí **Analyse de s√©curit√© initi√©e**

üîç **Scan en cours...**
‚Ä¢ V√©rification des en-t√™tes HTTP
‚Ä¢ Analyse des vuln√©rabilit√©s communes
‚Ä¢ Test de configuration SSL/TLS

**R√©sultats pr√©liminaires :**
‚Ä¢ ‚úÖ Certificat SSL valide
‚Ä¢ ‚ö†Ô∏è En-t√™te CSP manquant
‚Ä¢ ‚ö†Ô∏è X-Frame-Options non configur√©

Voulez-vous un rapport d√©taill√© ?`,
        metadata: {
          agent: "security",
          confidence: 0.88,
          scan_id: `scan_${Date.now()}`,
          vulnerabilities_found: 2,
        },
      }
    } else if (query.toLowerCase().includes("vuln√©rabilit√©") || query.toLowerCase().includes("vulnerability")) {
      return {
        response: `üõ°Ô∏è **Analyse des vuln√©rabilit√©s**

**Types de vuln√©rabilit√©s d√©tectables :**
‚Ä¢ Injections SQL
‚Ä¢ Cross-Site Scripting (XSS)
‚Ä¢ Cross-Site Request Forgery (CSRF)
‚Ä¢ Configurations non s√©curis√©es
‚Ä¢ Fuites d'informations

**Recommandations :**
‚Ä¢ Effectuer des scans r√©guliers
‚Ä¢ Maintenir les syst√®mes √† jour
‚Ä¢ Impl√©menter des en-t√™tes de s√©curit√©

Souhaitez-vous analyser une URL sp√©cifique ?`,
        metadata: {
          agent: "security",
          confidence: 0.9,
          source: "vulnerability_database",
        },
      }
    } else {
      return {
        response: `üõ°Ô∏è **Agent de Cybers√©curit√© NextGen**

Je peux vous aider avec :
‚Ä¢ üîç Scans de s√©curit√© d'URLs
‚Ä¢ üö® D√©tection de vuln√©rabilit√©s
‚Ä¢ üìä Analyse du trafic r√©seau
‚Ä¢ üìã G√©n√©ration de rapports de s√©curit√©
‚Ä¢ üí° Recommandations de s√©curit√©

Que souhaitez-vous analyser aujourd'hui ?`,
        metadata: {
          agent: "security",
          confidence: 0.85,
          capabilities: ["web_scanning", "vulnerability_detection", "network_analysis"],
        },
      }
    }
  }
}

// Fonction pour d√©terminer automatiquement l'agent
function determineAgent(query: string): "support" | "security" {
  const securityKeywords = [
    "s√©curit√©",
    "security",
    "scan",
    "vuln√©rabilit√©",
    "vulnerability",
    "hack",
    "attaque",
    "malware",
    "virus",
    "firewall",
    "ssl",
    "https",
    "analyse",
    "audit",
    "pentest",
    "threat",
    "menace",
  ]

  const supportKeywords = [
    "prix",
    "tarif",
    "price",
    "fonctionnalit√©",
    "feature",
    "aide",
    "help",
    "teamsquare",
    "collaboration",
    "√©quipe",
    "team",
    "projet",
    "project",
    "comment",
    "pourquoi",
    "installation",
    "configuration",
  ]

  const queryLower = query.toLowerCase()

  const securityScore = securityKeywords.filter((keyword) => queryLower.includes(keyword)).length
  const supportScore = supportKeywords.filter((keyword) => queryLower.includes(keyword)).length

  return securityScore > supportScore ? "security" : "support"
}

export async function POST(request: NextRequest) {
  try {
    const body: UnifiedAgentRequest = await request.json()
    const { query, agent_type, session_id = "default", target, scan_type } = body

    // D√©terminer l'agent √† utiliser
    let selectedAgent = agent_type
    if (agent_type === "auto") {
      selectedAgent = determineAgent(query)
    }

    // Simuler un d√©lai de traitement
    await new Promise((resolve) => setTimeout(resolve, 1000 + Math.random() * 2000))

    // Obtenir la r√©ponse de l'agent appropri√©
    const agentResponse = getAgentResponse(query, selectedAgent as "support" | "security")

    // Ajouter des m√©tadonn√©es suppl√©mentaires
    const response = {
      ...agentResponse,
      metadata: {
        ...agentResponse.metadata,
        session_id,
        timestamp: new Date().toISOString(),
        processing_time: Math.random() * 2 + 0.5,
        selected_agent: selectedAgent,
        auto_selected: agent_type === "auto",
      },
    }

    return NextResponse.json(response)
  } catch (error) {
    console.error("Erreur API agents unifi√©s:", error)
    return NextResponse.json(
      {
        error: "Erreur interne du serveur",
        response: "D√©sol√©, une erreur s'est produite. Veuillez r√©essayer.",
        metadata: {
          error: true,
          timestamp: new Date().toISOString(),
        },
      },
      { status: 500 },
    )
  }
}

export async function GET() {
  return NextResponse.json({
    status: "healthy",
    agents: {
      support: {
        name: "TeamSquare Support Agent",
        version: "2.0.0",
        capabilities: ["customer_support", "pricing_info", "feature_explanation"],
      },
      security: {
        name: "Cybersecurity Agent",
        version: "2.0.0",
        capabilities: ["web_scanning", "vulnerability_detection", "security_analysis"],
      },
    },
    features: ["auto_agent_selection", "unified_interface", "real_time_analysis"],
    timestamp: new Date().toISOString(),
  })
}
