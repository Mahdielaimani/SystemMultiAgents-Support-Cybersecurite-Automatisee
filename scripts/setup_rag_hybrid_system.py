"""
Configuration compl√®te du syst√®me RAG hybride (Vector + Graph)
"""

import os
import sys
import logging
import json
from pathlib import Path

# Ajouter le r√©pertoire racine au path
sys.path.append(str(Path(__file__).parent.parent))

def setup_neo4j_config():
    """Configure Neo4j dans settings.py"""
    print("üîß Configuration Neo4j...")
    
    settings_path = "config/settings.py"
    
    # Lire le fichier settings.py
    with open(settings_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Ajouter les variables Neo4j si elles n'existent pas
    neo4j_vars = """
# Neo4j Configuration
NEO4J_URI = os.getenv("NEO4J_URI", "bolt://localhost:7687")
NEO4J_USERNAME = os.getenv("NEO4J_USERNAME", "neo4j")
NEO4J_PASSWORD = os.getenv("NEO4J_PASSWORD", "password")
"""
    
    if "NEO4J_URI" not in content:
        # Trouver la ligne avec CHROMA_PERSIST_DIR et ajouter apr√®s
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if "CHROMA_PERSIST_DIR" in line:
                lines.insert(i + 1, neo4j_vars)
                break
        
        content = '\n'.join(lines)
        
        with open(settings_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ Variables Neo4j ajout√©es √† settings.py")
    else:
        print("‚úÖ Variables Neo4j d√©j√† pr√©sentes")

def setup_env_file():
    """Configure le fichier .env"""
    print("üîß Configuration .env...")
    
    env_content = """
# Neo4j Configuration
NEO4J_URI=bolt://localhost:7687
NEO4J_USERNAME=neo4j
NEO4J_PASSWORD=password

# Existing variables...
"""
    
    # Lire le .env existant
    env_path = ".env"
    existing_content = ""
    if os.path.exists(env_path):
        with open(env_path, 'r') as f:
            existing_content = f.read()
    
    # Ajouter Neo4j si pas pr√©sent
    if "NEO4J_URI" not in existing_content:
        with open(env_path, 'a') as f:
            f.write(env_content)
        print("‚úÖ Variables Neo4j ajout√©es √† .env")
    else:
        print("‚úÖ Variables Neo4j d√©j√† pr√©sentes dans .env")

def populate_chromadb():
    """Peuple ChromaDB avec des donn√©es d'exemple"""
    print("üîß Population ChromaDB...")
    
    try:
        from sentence_transformers import SentenceTransformer
        import chromadb
        from chromadb.config import Settings
        
        # Initialiser ChromaDB
        chroma_path = "./data/vector_db/chroma_db"
        os.makedirs(chroma_path, exist_ok=True)
        
        client = chromadb.PersistentClient(
            path=chroma_path,
            settings=Settings(anonymized_telemetry=False)
        )
        
        # Supprimer et recr√©er la collection
        try:
            client.delete_collection("knowledge_base")
        except:
            pass
        
        collection = client.create_collection("knowledge_base")
        
        # Charger le mod√®le d'embedding
        model = SentenceTransformer('BAAI/bge-large-en-v1.5')
        
        # Documents d'exemple TeamSquare
        documents = [
            {
                "content": "TeamSquare propose trois plans tarifaires : Plan Starter √† 29‚Ç¨/mois pour jusqu'√† 10 utilisateurs avec fonctionnalit√©s de base, Plan Professional √† 79‚Ç¨/mois pour jusqu'√† 50 utilisateurs avec fonctionnalit√©s avanc√©es et API, Plan Enterprise √† 199‚Ç¨/mois pour utilisateurs illimit√©s avec toutes fonctionnalit√©s et support d√©di√©.",
                "metadata": {"type": "pricing", "source": "official_docs"}
            },
            {
                "content": "TeamSquare est une plateforme de collaboration moderne qui offre collaboration en temps r√©el avec chat int√©gr√©, gestion de projets intuitive et visuelle, partage de fichiers s√©curis√©, tableaux de bord et analytics avanc√©s, API compl√®te pour int√©grations, s√©curit√© de niveau entreprise.",
                "metadata": {"type": "features", "source": "product_description"}
            },
            {
                "content": "L'API TeamSquare permet d'int√©grer facilement la plateforme avec vos outils existants. Elle offre des endpoints REST pour g√©rer les utilisateurs, projets, t√¢ches, et fichiers. Documentation compl√®te disponible avec exemples de code en Python, JavaScript, et PHP.",
                "metadata": {"type": "api", "source": "api_docs"}
            },
            {
                "content": "TeamSquare s'int√®gre avec plus de 50 outils populaires : Slack, Microsoft Teams, Google Workspace, Trello, Asana, GitHub, GitLab, Jira, Salesforce, HubSpot, Zoom, et bien d'autres. Int√©grations natives et via API.",
                "metadata": {"type": "integrations", "source": "integrations_list"}
            },
            {
                "content": "Support TeamSquare disponible 24/7 pour les plans Enterprise, support prioritaire pour les plans Professional, support email pour les plans Starter. Base de connaissances compl√®te, tutoriels vid√©o, et webinaires de formation disponibles.",
                "metadata": {"type": "support", "source": "support_info"}
            }
        ]
        
        # G√©n√©rer les embeddings et ajouter √† ChromaDB
        texts = [doc["content"] for doc in documents]
        embeddings = model.encode(texts).tolist()
        
        collection.add(
            ids=[f"doc_{i}" for i in range(len(documents))],
            documents=texts,
            metadatas=[doc["metadata"] for doc in documents],
            embeddings=embeddings
        )
        
        print(f"‚úÖ {len(documents)} documents ajout√©s √† ChromaDB")
        
    except Exception as e:
        print(f"‚ùå Erreur population ChromaDB: {e}")

def populate_neo4j():
    """Peuple Neo4j avec des donn√©es d'exemple"""
    print("üîß Population Neo4j...")
    
    try:
        # V√©rifier si Neo4j est disponible
        import subprocess
        result = subprocess.run(['docker', 'ps'], capture_output=True, text=True)
        
        if 'neo4j' not in result.stdout:
            print("‚ö†Ô∏è  Neo4j non d√©tect√©. D√©marrage avec Docker...")
            
            # D√©marrer Neo4j avec Docker
            docker_cmd = [
                'docker', 'run', '-d',
                '--name', 'neo4j-teamsquare',
                '-p', '7474:7474', '-p', '7687:7687',
                '-e', 'NEO4J_AUTH=neo4j/password',
                'neo4j:latest'
            ]
            
            subprocess.run(docker_cmd, check=True)
            print("‚úÖ Neo4j d√©marr√© avec Docker")
            
            # Attendre que Neo4j soit pr√™t
            import time
            print("‚è≥ Attente du d√©marrage de Neo4j...")
            time.sleep(10)
        
        # Importer et utiliser le graph manager
        from core.graph_manager import KnowledgeGraphManager
        
        graph_manager = KnowledgeGraphManager()
        
        # Ajouter des entit√©s TeamSquare
        entities = [
            ("TeamSquare", "Platform", {"description": "Plateforme de collaboration moderne"}),
            ("Plan Starter", "PricingPlan", {"price": "29‚Ç¨/mois", "users": "10"}),
            ("Plan Professional", "PricingPlan", {"price": "79‚Ç¨/mois", "users": "50"}),
            ("Plan Enterprise", "PricingPlan", {"price": "199‚Ç¨/mois", "users": "unlimited"}),
            ("API", "Feature", {"type": "REST", "documentation": "available"}),
            ("Chat", "Feature", {"type": "real-time", "integrated": True}),
            ("Projects", "Feature", {"type": "management", "visual": True}),
            ("Files", "Feature", {"type": "sharing", "secure": True}),
            ("Slack", "Integration", {"type": "chat", "native": True}),
            ("GitHub", "Integration", {"type": "development", "native": True})
        ]
        
        # Ajouter les entit√©s
        for name, entity_type, properties in entities:
            graph_manager.add_entity(name, entity_type, properties)
        
        # Ajouter des relations
        relations = [
            ("TeamSquare", "HAS_PLAN", "Plan Starter"),
            ("TeamSquare", "HAS_PLAN", "Plan Professional"),
            ("TeamSquare", "HAS_PLAN", "Plan Enterprise"),
            ("TeamSquare", "HAS_FEATURE", "API"),
            ("TeamSquare", "HAS_FEATURE", "Chat"),
            ("TeamSquare", "HAS_FEATURE", "Projects"),
            ("TeamSquare", "HAS_FEATURE", "Files"),
            ("TeamSquare", "INTEGRATES_WITH", "Slack"),
            ("TeamSquare", "INTEGRATES_WITH", "GitHub"),
            ("Plan Professional", "INCLUDES", "API"),
            ("Plan Enterprise", "INCLUDES", "API")
        ]
        
        for from_entity, relation_type, to_entity in relations:
            graph_manager.add_relation(from_entity, relation_type, to_entity)
        
        print(f"‚úÖ {len(entities)} entit√©s et {len(relations)} relations ajout√©es √† Neo4j")
        
    except Exception as e:
        print(f"‚ùå Erreur population Neo4j: {e}")
        print("üí° Conseil: Installez Docker et Neo4j pour utiliser le Graph RAG")

def main():
    """Configuration compl√®te du syst√®me RAG hybride"""
    print("üöÄ CONFIGURATION SYST√àME RAG HYBRIDE")
    print("=" * 50)
    
    try:
        # 1. Configuration Neo4j
        setup_neo4j_config()
        setup_env_file()
        
        # 2. Population ChromaDB
        populate_chromadb()
        
        # 3. Population Neo4j
        populate_neo4j()
        
        print("\nüéâ CONFIGURATION TERMIN√âE !")
        print("=" * 50)
        print("‚úÖ ChromaDB peupl√© avec des documents TeamSquare")
        print("‚úÖ Neo4j configur√© avec entit√©s et relations")
        print("‚úÖ Variables d'environnement configur√©es")
        print("\nüöÄ Testez maintenant :")
        print("python agents/support_agent/agentic_support_agent_rag_graph.py")
        
    except Exception as e:
        print(f"‚ùå Erreur configuration: {e}")

if __name__ == "__main__":
    main()
