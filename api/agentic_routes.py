# api/agentic_routes.py - VERSION CORRIG√âE AVEC D√âTECTION AM√âLIOR√âE
"""
Routes API pour l'agent agentic avec analyse de s√©curit√© automatique
"""
import logging
import sys
import os
import requests
from pathlib import Path
from fastapi import APIRouter, HTTPException
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from typing import Optional, Dict, Any, AsyncGenerator
import json
import asyncio

# Ajouter le r√©pertoire racine au path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Configuration du logging
logger = logging.getLogger(__name__)

# IMPORTANT: Cr√©ation du router FastAPI
router = APIRouter()

# Import de l'√©tat partag√©
from api.shared_state import system_state, security_alerts, update_user_activity, is_session_blocked

# Import de l'agent avec routage externe
try:
    from agents.support_agent.agentic_support_agent_with_external_routing import AgenticSupportAgentWithExternalRouting
    agent = AgenticSupportAgentWithExternalRouting()
    AGENT_AVAILABLE = True
    logger.info("‚úÖ Agent avec routage externe charg√© avec succ√®s")
except ImportError as e:
    logger.error(f"‚ùå Erreur import agent avec routage: {e}")

# Mod√®les Pydantic
class AgenticChatRequest(BaseModel):
    query: str
    session_id: Optional[str] = "default"

class AgenticChatResponse(BaseModel):
    content: str
    metadata: Dict[str, Any] = {}

# Listes de mots-cl√©s dangereux pour d√©tection fallback
DANGEROUS_KEYWORDS = {
    'sql_injection': ['sql injection', 'drop table', 'or 1=1', 'union select', 'delete from', '; drop', '--', '/*', '*/', 'exec(', 'execute('],
    'xss': ['<script', 'javascript:', 'onerror=', 'onload=', 'alert(', 'document.cookie', '<iframe', 'eval('],
    'command_injection': ['rm -rf', 'sudo', 'chmod 777', '/etc/passwd', 'nc -e', 'bash -i', '&&', '||', '|', ';'],
    'path_traversal': ['../..', '..\\', '%2e%2e', 'etc/passwd', 'windows/system32'],
    'ddos': ['ddos', 'dos attack', 'flood', 'botnet', 'amplification'],
    'exploit': ['exploit', 'vuln√©rabilit√©', 'vulnerability', 'buffer overflow', 'heap spray'],
    'malicious_intent': ['hack', 'pirater', 'craquer', 'breach', 'backdoor', 'trojan', 'malware', 'virus']
}

def detect_threats_by_keywords(query: str) -> Dict[str, Any]:
    """D√©tection de menaces par mots-cl√©s comme fallback"""
    query_lower = query.lower()
    threats_found = []
    threat_types = []
    
    for threat_type, keywords in DANGEROUS_KEYWORDS.items():
        for keyword in keywords:
            if keyword in query_lower:
                threats_found.append(keyword)
                if threat_type not in threat_types:
                    threat_types.append(threat_type)
    
    if threats_found:
        # D√©terminer le niveau de menace
        if len(threats_found) >= 3 or 'sql injection' in query_lower or 'drop table' in query_lower:
            threat_level = "critical"
        elif len(threats_found) >= 2:
            threat_level = "high"
        else:
            threat_level = "medium"
        
        return {
            "threat_detected": True,
            "threat_level": threat_level,
            "threats_found": threats_found,
            "threat_types": threat_types,
            "detection_method": "keyword_matching"
        }
    
    return {
        "threat_detected": False,
        "threat_level": "safe",
        "detection_method": "keyword_matching"
    }

async def analyze_message_security(query: str, session_id: str) -> Dict[str, Any]:
    """Analyse la s√©curit√© d'un message automatiquement - VERSION AM√âLIOR√âE"""
    try:
        # Appeler l'API de s√©curit√© interne
        security_analysis = {
            "text": query,
            "models": ["vulnerability_classifier", "intent_classifier"],
            "session_id": session_id
        }
        
        # Utiliser l'import direct au lieu de requests pour √©viter les probl√®mes de r√©seau
        from api.cybersecurity_routes import analyze_security, SecurityAnalysisRequest
        
        # Cr√©er la requ√™te
        request = SecurityAnalysisRequest(**security_analysis)
        
        # Analyser directement
        analysis_response = await analyze_security(request)
        analysis = analysis_response.dict()
        
        # Si l'analyse retourne "safe" mais qu'on d√©tecte des mots-cl√©s dangereux
        if analysis.get('overall_threat_level', 'safe') == 'safe':
            keyword_detection = detect_threats_by_keywords(query)
            
            if keyword_detection['threat_detected']:
                logger.warning(f"‚ö†Ô∏è Menace d√©tect√©e par mots-cl√©s: {keyword_detection['threats_found']}")
                
                # Mettre √† jour l'analyse avec la d√©tection par mots-cl√©s
                analysis['overall_threat_level'] = keyword_detection['threat_level']
                analysis['keyword_detection'] = keyword_detection
                analysis['vulnerability_classifier'] = {
                    'vulnerability_type': keyword_detection['threat_types'][0].upper() if keyword_detection['threat_types'] else 'UNKNOWN',
                    'confidence': 0.9,
                    'detection_method': 'keyword_matching'
                }
                analysis['intent_classifier'] = {
                    'intent': 'Malicious',
                    'confidence': 0.85,
                    'detection_method': 'keyword_matching'
                }
        
        logger.info(f"üîç Analyse s√©curit√© finale: {analysis.get('overall_threat_level', 'unknown')}")
        return analysis
            
    except Exception as e:
        logger.error(f"‚ùå Erreur analyse s√©curit√©: {e}")
        
        # En cas d'erreur, utiliser la d√©tection par mots-cl√©s
        keyword_detection = detect_threats_by_keywords(query)
        
        return {
            "overall_threat_level": keyword_detection['threat_level'],
            "error": str(e),
            "fallback_detection": keyword_detection,
            "vulnerability_classifier": {
                'vulnerability_type': keyword_detection['threat_types'][0].upper() if keyword_detection.get('threat_types') else 'SAFE',
                'confidence': 0.8
            },
            "intent_classifier": {
                'intent': 'Malicious' if keyword_detection['threat_detected'] else 'Neutral',
                'confidence': 0.8
            }
        }

async def check_and_block_if_needed(analysis: Dict[str, Any], session_id: str, query: str) -> bool:
    """V√©rifie si le syst√®me doit √™tre bloqu√© - VERSION AM√âLIOR√âE"""
    try:
        threat_level = analysis.get('overall_threat_level', 'safe')
        
        # Crit√®res de blocage
        should_block = False
        block_reason = ""
        
        # Bloquer si menace critique ou high
        if threat_level in ["critical", "high"]:
            should_block = True
            block_reason = f"Niveau de menace {threat_level} d√©tect√©"
        
        # Bloquer si intention malveillante avec haute confiance
        intent_result = analysis.get('intent_classifier', {})
        if (intent_result.get('intent') == 'Malicious' and 
            intent_result.get('confidence', 0) > 0.7):
            should_block = True
            block_reason = "Intention malveillante confirm√©e"
        
        # Bloquer si vuln√©rabilit√© d√©tect√©e
        vuln_result = analysis.get('vulnerability_classifier', {})
        if (vuln_result.get('vulnerability_type') not in ['SAFE', 'error', None] and
            vuln_result.get('confidence', 0) > 0.6):
            should_block = True
            block_reason = f"Vuln√©rabilit√© d√©tect√©e: {vuln_result.get('vulnerability_type')}"
        
        # Bloquer si d√©tection par mots-cl√©s
        if analysis.get('keyword_detection', {}).get('threat_detected'):
            should_block = True
            threats = analysis['keyword_detection']['threats_found']
            block_reason = f"Contenu malveillant d√©tect√©: {', '.join(threats[:3])}"
        
        if should_block:
            logger.warning(f"üö´ Blocage syst√®me initi√©: {block_reason}")
            
            # Mettre √† jour l'√©tat du syst√®me directement
            system_state["blocked"] = True
            system_state["block_reason"] = block_reason
            system_state["threat_level"] = "danger"
            system_state["last_block_time"] = analysis.get("timestamp", datetime.now().isoformat())
            
            # Mettre √† jour l'activit√© utilisateur
            update_user_activity(session_id, threat_score=1.0, blocked=True)
            
            # Ajouter une alerte avec plus de d√©tails
            from api.shared_state import add_security_alert
            add_security_alert(
                alert_type="system",
                severity="critical" if threat_level == "critical" else "high",
                message=f"Session bloqu√©e: {block_reason} | Query: {query[:100]}...",
                session_id=session_id,
                details={
                    "analysis": analysis,
                    "query": query,
                    "threat_level": threat_level,
                    "block_reason": block_reason
                }
            )
            
            logger.info("‚úÖ Syst√®me bloqu√© avec succ√®s et alerte cr√©√©e")
        
        return should_block
        
    except Exception as e:
        logger.error(f"‚ùå Erreur v√©rification blocage: {e}")
        return False

async def stream_response(content: str) -> AsyncGenerator[str, None]:
    """G√©n√®re une r√©ponse en streaming"""
    words = content.split()
    for i, word in enumerate(words):
        chunk = {
            "content": word + " ",
            "done": i == len(words) - 1
        }
        yield f"data: {json.dumps(chunk)}\n\n"
        await asyncio.sleep(0.05)
    
    yield f"data: {json.dumps({'content': '', 'done': True})}\n\n"

@router.get("/health")
async def agentic_health():
    """V√©rification de sant√© de l'agent avec routage"""
    return {
        "status": "healthy" if AGENT_AVAILABLE else "degraded",
        "agent": "agentic_with_external_routing" if AGENT_AVAILABLE else "none",
        "version": "7.0.2",
        "features": ["vector_rag", "networkx_graph", "memory", "external_routing", "streaming", "auto_security_analysis", "keyword_detection"] if AGENT_AVAILABLE else [],
        "security_enabled": True
    }

@router.post("/chat")
async def agentic_chat(request: AgenticChatRequest):
    """Endpoint principal pour le chat avec analyse de s√©curit√© automatique - VERSION AM√âLIOR√âE"""
    try:
        if not AGENT_AVAILABLE or not agent:
            raise HTTPException(status_code=503, detail="Agent non disponible")
        
        logger.info(f"üîç Requ√™te re√ßue: {request.query[:50]}... (Session: {request.session_id})")
        
        # V√©rifier si la session est d√©j√† bloqu√©e
        if is_session_blocked(request.session_id):
            logger.warning(f"üö´ Session d√©j√† bloqu√©e: {request.session_id}")
            return AgenticChatResponse(
                content="""üö´ **Acc√®s Refus√©**

Votre session a √©t√© suspendue pour des raisons de s√©curit√©. 

Si vous pensez qu'il s'agit d'une erreur, veuillez contacter notre support.""",
                metadata={
                    "source": "security_block",
                    "blocked": True,
                    "session_blocked": True,
                    "session_id": request.session_id
                }
            )
        
        # 1. ANALYSE DE S√âCURIT√â AUTOMATIQUE AM√âLIOR√âE
        security_analysis = await analyze_message_security(request.query, request.session_id)
        
        # 2. V√âRIFIER SI BLOCAGE N√âCESSAIRE (avec la query pour plus de contexte)
        system_blocked = await check_and_block_if_needed(security_analysis, request.session_id, request.query)
        
        # 3. G√âN√âRER R√âPONSE ADAPT√âE
        if system_blocked:
            # R√©ponse de s√©curit√© si syst√®me bloqu√©
            response_content = """üö´ **Acc√®s Temporairement Restreint**

Pour des raisons de s√©curit√©, cette conversation a √©t√© suspendue. Notre syst√®me de protection a d√©tect√© un contenu potentiellement malveillant.

**Que faire maintenant ?**
‚Ä¢ Reformulez votre question de mani√®re plus claire
‚Ä¢ √âvitez d'utiliser des termes techniques sensibles
‚Ä¢ Contactez notre support si c'est une erreur

**Support TeamSquare :** Nous sommes l√† pour vous aider de mani√®re s√©curis√©e ! üõ°Ô∏è"""
            
            metadata = {
                "source": "security_block",
                "blocked": True,
                "threat_level": security_analysis.get('overall_threat_level', 'unknown'),
                "session_id": request.session_id,
                "analysis": security_analysis,
                "block_reason": system_state.get("block_reason", "Menace d√©tect√©e")
            }
            
        else:
            # Traitement normal avec l'agent
            response_content = agent.process_query(request.query, request.session_id)
            
            # M√©tadonn√©es enrichies avec analyse s√©curit√©
            metadata = {
                "source": "agentic_with_external_routing", 
                "session_id": request.session_id,
                "agent_version": "7.0.2",
                "security_analysis": security_analysis,
                "threat_level": security_analysis.get('overall_threat_level', 'safe'),
                "blocked": False
            }
            
            # Informations LLM
            if hasattr(agent, 'llm_manager') and agent.llm_manager:
                metadata.update({
                    "provider": agent.llm_manager.current_provider,
                    "tokens_used_today": getattr(agent.llm_manager, 'tokens_used_today', 0),
                    "model": "gemini-1.5-flash" if agent.llm_manager.current_provider == "gemini" else "mistral-7b"
                })
            
            # Score de confiance
            if hasattr(agent, 'last_confidence_score'):
                metadata["confidence_score"] = agent.last_confidence_score
            
            # Statistiques de routage externe
            if hasattr(agent, 'stats'):
                metadata.update({
                    "external_offers": agent.stats.get('external_offers', 0),
                    "external_searches": agent.stats.get('external_searches', 0),
                    "pending_external_search": request.session_id in getattr(agent, 'pending_external_searches', {})
                })
            
            # Mettre √† jour l'activit√© utilisateur avec un score appropri√©
            threat_score = 0.0
            if security_analysis.get('overall_threat_level') == 'critical':
                threat_score = 1.0
            elif security_analysis.get('overall_threat_level') == 'high':
                threat_score = 0.8
            elif security_analysis.get('overall_threat_level') == 'medium':
                threat_score = 0.5
            elif security_analysis.get('overall_threat_level') == 'low':
                threat_score = 0.25
            
            update_user_activity(request.session_id, threat_score=threat_score, blocked=False)
        
        logger.info(f"‚úÖ R√©ponse g√©n√©r√©e (Blocked: {system_blocked}) - Threat: {security_analysis.get('overall_threat_level', 'safe')}")
        
        return AgenticChatResponse(
            content=response_content,
            metadata=metadata
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur chat avec routage: {e}")
        # R√©ponse de fallback en cas d'erreur
        fallback_response = f"""Bonjour ! Je suis l'assistant TeamSquare avec protection de s√©curit√©.

**Votre question :** {request.query}

Je rencontre actuellement un probl√®me technique, mais je peux vous aider avec :
‚Ä¢ Questions sur TeamSquare (prix, fonctionnalit√©s)
‚Ä¢ Support technique g√©n√©ral
‚Ä¢ Informations sur nos services

Pouvez-vous reformuler votre question ?"""
        
        return AgenticChatResponse(
            content=fallback_response,
            metadata={"error": str(e), "fallback": True, "session_id": request.session_id}
        )

@router.post("/chat/stream")
async def agentic_chat_stream(request: AgenticChatRequest):
    """Endpoint de chat avec streaming et s√©curit√©"""
    try:
        if not AGENT_AVAILABLE or not agent:
            raise HTTPException(status_code=503, detail="Agent non disponible")
        
        logger.info(f"üîç Requ√™te streaming: {request.query[:50]}... (Session: {request.session_id})")
        
        # V√©rifier si la session est bloqu√©e
        if is_session_blocked(request.session_id):
            response_content = "üö´ Acc√®s suspendu pour des raisons de s√©curit√©. Veuillez contacter le support."
            return StreamingResponse(
                stream_response(response_content),
                media_type="text/event-stream"
            )
        
        # Analyse de s√©curit√©
        security_analysis = await analyze_message_security(request.query, request.session_id)
        system_blocked = await check_and_block_if_needed(security_analysis, request.session_id, request.query)
        
        if system_blocked:
            response_content = "üö´ Acc√®s suspendu pour des raisons de s√©curit√©. Veuillez reformuler votre question."
        else:
            response_content = agent.process_query(request.query, request.session_id)
        
        # Retourner la r√©ponse en streaming
        return StreamingResponse(
            stream_response(response_content),
            media_type="text/event-stream",
            headers={
                "Cache-Control": "no-cache",
                "Connection": "keep-alive",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "*",
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur chat streaming: {e}")
        error_response = f"D√©sol√©, je rencontre un probl√®me technique avec votre question: {request.query}"
        return StreamingResponse(
            stream_response(error_response),
            media_type="text/event-stream"
        )

@router.get("/status")
async def agentic_status():
    """Status d√©taill√© de l'agent avec routage"""
    try:
        if not AGENT_AVAILABLE or not agent:
            return {"error": "Agent non disponible", "agent_available": False}
        
        # R√©cup√©rer les statistiques de l'agent
        stats = agent.get_stats()
        
        return {
            "agent_available": True,
            "agent_type": "agentic_with_external_routing",
            "timestamp": datetime.now().isoformat(),
            "version": "7.0.2",
            "stats": stats,
            "security": {
                "enabled": True,
                "threat_level": system_state.get("threat_level", "safe"),
                "blocked_sessions": len([k for k, v in user_activities.items() if v.get("blocked", False)]),
                "total_alerts": len(security_alerts)
            },
            "features": {
                "vector_rag": stats.get("components_status", {}).get("chromadb", False),
                "networkx_graph": True,
                "memory": True,
                "external_routing": True,
                "streaming": True,
                "security_analysis": True,
                "auto_blocking": True,
                "keyword_detection": True,
                "llm_hybrid": stats.get("components_status", {}).get("llm_manager", False)
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur status: {e}")
        return {
            "error": str(e),
            "agent_available": False,
            "timestamp": datetime.now().isoformat()
        }

@router.get("/security/stats")
async def get_security_stats():
    """Statistiques de s√©curit√©"""
    try:
        from api.shared_state import user_activities
        
        blocked_sessions = sum(1 for activity in user_activities.values() if activity.get("blocked", False))
        high_risk_sessions = sum(1 for activity in user_activities.values() if activity.get("threat_score", 0) > 0.7)
        
        return {
            "total_alerts": len(security_alerts),
            "recent_alerts": security_alerts[:5],
            "blocked_sessions": blocked_sessions,
            "high_risk_sessions": high_risk_sessions,
            "system_state": system_state,
            "security_integrated": True,
            "keyword_detection_enabled": True
        }
    except Exception as e:
        return {"security_integrated": False, "error": str(e)}

# Import n√©cessaire pour le timestamp
from datetime import datetime