# api/cybersecurity_routes.py
"""
Routes API pour l'agent de cybers√©curit√© avec int√©gration des mod√®les AI
"""
import logging
import sys
import os
from pathlib import Path
from fastapi import APIRouter, HTTPException, BackgroundTasks
from pydantic import BaseModel
from typing import Optional, Dict, Any, List
import json
from datetime import datetime
import asyncio

# Ajouter le r√©pertoire racine au path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Configuration du logging
logger = logging.getLogger(__name__)

# IMPORTANT: Cr√©ation du router FastAPI
router = APIRouter()

# Import des mod√®les de s√©curit√©
try:
    from agents.cybersecurity_agent.custom_model_loaders import HuggingFaceSecurityModels
    security_models = HuggingFaceSecurityModels()
    MODELS_AVAILABLE = True
    logger.info("‚úÖ Mod√®les de s√©curit√© charg√©s avec succ√®s")
except Exception as e:
    logger.error(f"‚ùå Erreur chargement mod√®les de s√©curit√©: {e}")
    security_models = None
    MODELS_AVAILABLE = False

# Import de l'agent de cybers√©curit√©
try:
    from agents.cybersecurity_agent.enhanced_agent import EnhancedCybersecurityAgent
    cyber_agent = EnhancedCybersecurityAgent()
    AGENT_AVAILABLE = True
    logger.info("‚úÖ Agent de cybers√©curit√© charg√©")
except Exception as e:
    logger.error(f"‚ùå Erreur chargement agent cybers√©curit√©: {e}")
    cyber_agent = None
    AGENT_AVAILABLE = False

# Stockage des alertes et √©tat du syst√®me
security_alerts = []
system_state = {
    "blocked": False,
    "threat_level": "safe",
    "active_threats": [],
    "last_scan": None
}

# Mod√®les Pydantic
class SecurityAnalysisRequest(BaseModel):
    text: str
    models: List[str] = ["vulnerability_classifier", "network_analyzer", "intent_classifier"]
    session_id: Optional[str] = "default"

class SecurityAnalysisResponse(BaseModel):
    vulnerability_classifier: Optional[Dict[str, Any]] = None
    network_analyzer: Optional[Dict[str, Any]] = None
    intent_classifier: Optional[Dict[str, Any]] = None
    overall_threat_level: str
    timestamp: str
    metadata: Dict[str, Any] = {}

class SecurityAlert(BaseModel):
    id: str
    type: str  # vulnerability, network, intent
    severity: str  # low, medium, high, critical
    message: str
    timestamp: str
    action_taken: str
    details: Optional[Dict[str, Any]] = {}

class SystemBlockRequest(BaseModel):
    reason: str
    severity: str = "critical"
    block_duration: Optional[int] = None  # en secondes

@router.get("/health")
async def security_health():
    """V√©rification de sant√© du syst√®me de s√©curit√©"""
    return {
        "status": "healthy" if MODELS_AVAILABLE else "degraded",
        "models_loaded": MODELS_AVAILABLE,
        "agent_available": AGENT_AVAILABLE,
        "system_state": system_state,
        "active_alerts": len(security_alerts),
        "version": "1.0.0"
    }

@router.post("/analyze")
async def analyze_security(request: SecurityAnalysisRequest):
    """Analyse de s√©curit√© d'un texte avec les mod√®les AI"""
    try:
        if not MODELS_AVAILABLE or not security_models:
            raise HTTPException(status_code=503, detail="Mod√®les de s√©curit√© non disponibles")
        
        logger.info(f"üîç Analyse de s√©curit√©: {request.text[:50]}...")
        
        results = {}
        threat_detected = False
        
        # Analyse avec chaque mod√®le
        if "vulnerability_classifier" in request.models:
            try:
                vuln_result = security_models.classify_vulnerability(request.text)
                results["vulnerability_classifier"] = vuln_result
                
                if vuln_result.get("vulnerability_type") != "SAFE":
                    threat_detected = True
                    await create_alert(
                        type="vulnerability",
                        severity="high" if vuln_result.get("confidence", 0) > 0.8 else "medium",
                        message=f"Vuln√©rabilit√© d√©tect√©e: {vuln_result.get('vulnerability_type')}",
                        details=vuln_result
                    )
            except Exception as e:
                logger.error(f"Erreur vulnerability_classifier: {e}")
                results["vulnerability_classifier"] = {"error": str(e)}
        
        if "network_analyzer" in request.models:
            try:
                net_result = security_models.analyze_network_traffic(request.text)
                results["network_analyzer"] = net_result
                
                if net_result.get("traffic_type") != "NORMAL":
                    threat_detected = True
                    severity = "critical" if net_result.get("traffic_type") == "DDOS" else "high"
                    await create_alert(
                        type="network",
                        severity=severity,
                        message=f"Activit√© r√©seau suspecte: {net_result.get('traffic_type')}",
                        details=net_result
                    )
            except Exception as e:
                logger.error(f"Erreur network_analyzer: {e}")
                results["network_analyzer"] = {"error": str(e)}
        
        if "intent_classifier" in request.models:
            try:
                intent_result = security_models.classify_intent(request.text)
                results["intent_classifier"] = intent_result
                
                if intent_result.get("intent") == "Malicious":
                    threat_detected = True
                    await create_alert(
                        type="intent",
                        severity="high" if intent_result.get("confidence", 0) > 0.5 else "medium",
                        message=f"Intention malveillante d√©tect√©e (confiance: {intent_result.get('confidence', 0):.2%})",
                        details=intent_result
                    )
            except Exception as e:
                logger.error(f"Erreur intent_classifier: {e}")
                results["intent_classifier"] = {"error": str(e)}
        
        # Calculer le niveau de menace global
        threat_level = calculate_overall_threat_level(results)
        results["overall_threat_level"] = threat_level
        
        # Mettre √† jour l'√©tat du syst√®me
        system_state["threat_level"] = threat_level
        system_state["last_scan"] = datetime.now().isoformat()
        
        # Si menace critique, bloquer le syst√®me
        if threat_level == "critical":
            await block_system("Menace critique d√©tect√©e", "critical")
        
        # Ajouter les m√©tadonn√©es
        results["timestamp"] = datetime.now().isoformat()
        results["metadata"] = {
            "text_length": len(request.text),
            "models_used": request.models,
            "threat_detected": threat_detected,
            "session_id": request.session_id
        }
        
        logger.info(f"‚úÖ Analyse termin√©e - Niveau de menace: {threat_level}")
        
        return SecurityAnalysisResponse(**results)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur analyse s√©curit√©: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/alert")
async def create_alert(
    type: str,
    severity: str,
    message: str,
    details: Optional[Dict[str, Any]] = None
):
    """Cr√©er une alerte de s√©curit√©"""
    alert = SecurityAlert(
        id=f"alert_{datetime.now().timestamp()}",
        type=type,
        severity=severity,
        message=message,
        timestamp=datetime.now().isoformat(),
        action_taken="Alerte cr√©√©e et logg√©e",
        details=details or {}
    )
    
    security_alerts.append(alert.dict())
    
    # Limiter le nombre d'alertes stock√©es
    if len(security_alerts) > 100:
        security_alerts.pop(0)
    
    # Si alerte critique, notifier imm√©diatement
    if severity == "critical":
        logger.warning(f"üö® ALERTE CRITIQUE: {message}")
        system_state["active_threats"].append(alert.dict())
    
    return alert

@router.get("/alerts")
async def get_alerts(
    limit: int = 50,
    severity: Optional[str] = None,
    type: Optional[str] = None
):
    """R√©cup√©rer les alertes de s√©curit√©"""
    filtered_alerts = security_alerts
    
    if severity:
        filtered_alerts = [a for a in filtered_alerts if a["severity"] == severity]
    
    if type:
        filtered_alerts = [a for a in filtered_alerts if a["type"] == type]
    
    # Trier par timestamp d√©croissant
    filtered_alerts.sort(key=lambda x: x["timestamp"], reverse=True)
    
    return {
        "alerts": filtered_alerts[:limit],
        "total": len(filtered_alerts),
        "filters": {
            "severity": severity,
            "type": type
        }
    }

@router.post("/block")
async def block_system(request: SystemBlockRequest):
    """Bloquer le syst√®me pour des raisons de s√©curit√©"""
    system_state["blocked"] = True
    system_state["block_reason"] = request.reason
    system_state["block_time"] = datetime.now().isoformat()
    
    # Cr√©er une alerte de blocage
    await create_alert(
        type="system",
        severity=request.severity,
        message=f"Syst√®me bloqu√©: {request.reason}",
        details={"duration": request.block_duration}
    )
    
    # Si dur√©e sp√©cifi√©e, d√©bloquer apr√®s le d√©lai
    if request.block_duration:
        asyncio.create_task(auto_unblock(request.block_duration))
    
    logger.warning(f"üö´ Syst√®me bloqu√©: {request.reason}")
    
    return {
        "status": "blocked",
        "reason": request.reason,
        "timestamp": system_state["block_time"]
    }

@router.post("/unblock")
async def unblock_system():
    """D√©bloquer le syst√®me"""
    system_state["blocked"] = False
    system_state["block_reason"] = None
    system_state["threat_level"] = "safe"
    system_state["active_threats"] = []
    
    logger.info("‚úÖ Syst√®me d√©bloqu√©")
    
    return {
        "status": "unblocked",
        "timestamp": datetime.now().isoformat()
    }

@router.get("/report")
async def generate_security_report():
    """G√©n√©rer un rapport de s√©curit√©"""
    # Compter les alertes par type et s√©v√©rit√©
    alert_stats = {
        "by_type": {},
        "by_severity": {},
        "total": len(security_alerts)
    }
    
    for alert in security_alerts:
        # Par type
        alert_type = alert["type"]
        alert_stats["by_type"][alert_type] = alert_stats["by_type"].get(alert_type, 0) + 1
        
        # Par s√©v√©rit√©
        severity = alert["severity"]
        alert_stats["by_severity"][severity] = alert_stats["by_severity"].get(severity, 0) + 1
    
    # Alertes critiques r√©centes
    critical_alerts = [a for a in security_alerts if a["severity"] == "critical"][-5:]
    
    report = {
        "generated_at": datetime.now().isoformat(),
        "system_state": system_state,
        "alert_statistics": alert_stats,
        "recent_critical_alerts": critical_alerts,
        "recommendations": generate_recommendations(alert_stats),
        "models_status": {
            "vulnerability_classifier": "active" if MODELS_AVAILABLE else "inactive",
            "network_analyzer": "active" if MODELS_AVAILABLE else "inactive",
            "intent_classifier": "active" if MODELS_AVAILABLE else "inactive"
        }
    }
    
    return report

@router.get("/models/info")
async def get_models_info():
    """Informations sur les mod√®les de s√©curit√©"""
    if not MODELS_AVAILABLE or not security_models:
        raise HTTPException(status_code=503, detail="Mod√®les non disponibles")
    
    try:
        info = security_models.get_model_info()
        return info
    except Exception as e:
        logger.error(f"Erreur r√©cup√©ration info mod√®les: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/models/test")
async def test_models():
    """Tester les mod√®les de s√©curit√©"""
    if not MODELS_AVAILABLE or not security_models:
        raise HTTPException(status_code=503, detail="Mod√®les non disponibles")
    
    try:
        test_results = security_models.test_all_models()
        return test_results
    except Exception as e:
        logger.error(f"Erreur test mod√®les: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Fonctions utilitaires
def calculate_overall_threat_level(results: Dict[str, Any]) -> str:
    """Calculer le niveau de menace global"""
    threat_score = 0
    
    # V√©rifier les vuln√©rabilit√©s
    if "vulnerability_classifier" in results:
        vuln = results["vulnerability_classifier"]
        if vuln.get("vulnerability_type") not in ["SAFE", "error", None]:
            threat_score += vuln.get("confidence", 0) * 3
    
    # V√©rifier le trafic r√©seau
    if "network_analyzer" in results:
        net = results["network_analyzer"]
        if net.get("traffic_type") not in ["NORMAL", "error", None]:
            threat_score += net.get("confidence", 0) * 2
    
    # V√©rifier l'intention
    if "intent_classifier" in results:
        intent = results["intent_classifier"]
        if intent.get("intent") == "Malicious":
            threat_score += intent.get("confidence", 0) * 2.5
        elif intent.get("intent") == "Suspicious":
            threat_score += intent.get("confidence", 0) * 1
    
    # D√©terminer le niveau
    if threat_score >= 2.5:
        return "critical"
    elif threat_score >= 1.5:
        return "high"
    elif threat_score >= 0.5:
        return "medium"
    elif threat_score > 0:
        return "low"
    else:
        return "safe"

def generate_recommendations(alert_stats: Dict[str, Any]) -> List[str]:
    """G√©n√©rer des recommandations bas√©es sur les statistiques"""
    recommendations = []
    
    # Recommandations bas√©es sur le nombre total d'alertes
    if alert_stats["total"] > 50:
        recommendations.append("Nombre √©lev√© d'alertes d√©tect√©es - renforcer la surveillance")
    
    # Recommandations par type
    if alert_stats["by_type"].get("vulnerability", 0) > 10:
        recommendations.append("Nombreuses vuln√©rabilit√©s d√©tect√©es - mettre √† jour les filtres de s√©curit√©")
    
    if alert_stats["by_type"].get("network", 0) > 5:
        recommendations.append("Activit√© r√©seau suspecte fr√©quente - v√©rifier les r√®gles du pare-feu")
    
    if alert_stats["by_type"].get("intent", 0) > 15:
        recommendations.append("Intentions malveillantes r√©currentes - former les utilisateurs")
    
    # Recommandations par s√©v√©rit√©
    if alert_stats["by_severity"].get("critical", 0) > 0:
        recommendations.append("Alertes critiques d√©tect√©es - audit de s√©curit√© recommand√©")
    
    if not recommendations:
        recommendations.append("Syst√®me s√©curis√© - continuer la surveillance normale")
    
    return recommendations

async def auto_unblock(duration: int):
    """D√©bloquer automatiquement le syst√®me apr√®s un d√©lai"""
    await asyncio.sleep(duration)
    if system_state["blocked"]:
        await unblock_system()
        logger.info(f"‚úÖ Syst√®me d√©bloqu√© automatiquement apr√®s {duration} secondes")

# WebSocket pour les notifications en temps r√©el (optionnel)
from fastapi import WebSocket, WebSocketDisconnect
from typing import Set

class ConnectionManager:
    def __init__(self):
        self.active_connections: Set[WebSocket] = set()

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.add(websocket)

    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)

    async def broadcast(self, message: dict):
        for connection in self.active_connections:
            try:
                await connection.send_json(message)
            except:
                pass

manager = ConnectionManager()

@router.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket pour les notifications en temps r√©el"""
    await manager.connect(websocket)
    try:
        while True:
            # Envoyer l'√©tat du syst√®me p√©riodiquement
            await websocket.send_json({
                "type": "system_state",
                "data": system_state,
                "timestamp": datetime.now().isoformat()
            })
            await asyncio.sleep(5)  # Mise √† jour toutes les 5 secondes
    except WebSocketDisconnect:
        manager.disconnect(websocket)
    except Exception as e:
        logger.error(f"Erreur WebSocket: {e}")
        manager.disconnect(websocket)