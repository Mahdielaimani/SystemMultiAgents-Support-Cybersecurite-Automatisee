#!/usr/bin/env python3
"""
Serveur FastAPI principal - Version compl√®te avec communication inter-agents
Support pour agents agentic et cybers√©curit√© avec communication temps r√©el
"""
import logging
import sys
import os
import uvicorn
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, Optional
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/api_server.log', mode='a') if os.path.exists('logs') else logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Ajouter le r√©pertoire racine au path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Cr√©er l'application FastAPI
app = FastAPI(
    title="NextGen-Agent API",
    description="API pour agents IA avec s√©curit√© int√©gr√©e",
    version="7.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# =============================================================================
# MOD√àLES PYDANTIC
# =============================================================================

class InterAgentMessage(BaseModel):
    """Mod√®le pour la communication inter-agents"""
    from_agent: str
    to_agent: str
    message: Dict[str, Any]

class SystemBlockRequest(BaseModel):
    """Requ√™te de blocage du syst√®me"""
    reason: str
    severity: str = "critical"
    session_id: Optional[str] = None
    analysis: Optional[Dict[str, Any]] = None

class AdminRequest(BaseModel):
    """Requ√™te d'administration"""
    action: str
    username: Optional[str] = None
    password: Optional[str] = None
    reason: Optional[str] = None
    severity: Optional[str] = None

# =============================================================================
# √âTAT GLOBAL DU SYST√àME
# =============================================================================

system_state = {
    "blocked": False,
    "threat_level": "safe",  # safe, warning, danger
    "block_reason": None,
    "last_block_time": None,
    "active_sessions": {},
    "total_threats_detected": 0,
    "last_scan": datetime.now().isoformat()
}

# Liste des alertes en m√©moire (en production, utiliser une base de donn√©es)
security_alerts = []
user_activities = {}

# =============================================================================
# ROUTES PRINCIPALES
# =============================================================================

@app.get("/")
async def root():
    """Endpoint racine"""
    return {
        "message": "NextGen-Agent API v7.0.0",
        "status": "operational",
        "timestamp": datetime.now().isoformat(),
        "services": {
            "agentic_support": "available",
            "cybersecurity": "available", 
            "inter_agent_communication": "available",
            "admin_panel": "available"
        }
    }

@app.get("/health")
async def health_check():
    """V√©rification de sant√© globale"""
    try:
        # V√©rifier les composants
        components_status = {
            "api_server": "healthy",
            "agentic_agent": "unknown",
            "security_agent": "unknown",
            "database": "memory",  # En m√©moire pour cette version
            "llm_services": "unknown"
        }
        
        # Tester l'agent agentic
        try:
            from api.agentic_routes import AGENT_AVAILABLE
            components_status["agentic_agent"] = "healthy" if AGENT_AVAILABLE else "degraded"
        except ImportError:
            components_status["agentic_agent"] = "unavailable"
        
        # Tester l'agent de s√©curit√©
        try:
            from api.cybersecurity_routes import models_manager
            components_status["security_agent"] = "healthy" if models_manager else "degraded"
        except ImportError:
            components_status["security_agent"] = "unavailable"
        
        overall_status = "healthy"
        if any(status in ["degraded", "unavailable"] for status in components_status.values()):
            overall_status = "degraded"
        
        return {
            "status": overall_status,
            "timestamp": datetime.now().isoformat(),
            "components": components_status,
            "system_state": system_state,
            "uptime": "running",
            "version": "7.0.0"
        }
        
    except Exception as e:
        logger.error(f"Erreur health check: {e}")
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
        )

@app.get("/status")
async def detailed_status():
    """Status d√©taill√© du syst√®me"""
    try:
        return {
            "api_version": "7.0.0",
            "timestamp": datetime.now().isoformat(),
            "system_state": system_state,
            "security_stats": {
                "total_alerts": len(security_alerts),
                "active_threats": system_state["total_threats_detected"],
                "blocked_sessions": len([s for s in user_activities.values() if s.get("blocked", False)]),
                "threat_level": system_state["threat_level"]
            },
            "services": {
                "agentic_support": {"status": "available", "endpoint": "/api/agentic"},
                "cybersecurity": {"status": "available", "endpoint": "/api/cybersecurity"},
                "admin": {"status": "available", "endpoint": "/api/admin-security"},
                "inter_agent": {"status": "available", "endpoint": "/api/inter-agent"}
            }
        }
    except Exception as e:
        logger.error(f"Erreur status: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# =============================================================================
# COMMUNICATION INTER-AGENTS - CORRIG√âE
# =============================================================================

@app.post("/api/inter-agent/communicate")
async def inter_agent_communication(request: InterAgentMessage):
    """Communication entre agents (support <-> s√©curit√©) - VERSION CORRIG√âE"""
    try:
        logger.info(f"üì® Communication inter-agents: {request.from_agent} -> {request.to_agent}")
        
        # Communication Support ‚Üí S√©curit√©
        if request.from_agent == "support" and request.to_agent == "security":
            if request.message.get("action") == "verify_message":
                try:
                    # Import local pour √©viter les d√©pendances circulaires
                    from api.cybersecurity_routes import SecurityAnalysisRequest, analyze_security
                    
                    analysis_request = SecurityAnalysisRequest(
                        text=request.message.get("text", ""),
                        models=request.message.get("models", ["vulnerability_classifier", "intent_classifier"]),
                        session_id=request.message.get("session_id", "inter-agent")
                    )
                    
                    analysis = await analyze_security(analysis_request)
                    return {
                        "status": "analyzed",
                        "analysis": analysis.dict(),
                        "timestamp": datetime.now().isoformat()
                    }
                except Exception as e:
                    logger.error(f"Erreur analyse s√©curit√©: {e}")
                    return {
                        "status": "error",
                        "error": str(e),
                        "timestamp": datetime.now().isoformat()
                    }
        
        # Communication S√©curit√© ‚Üí Support  
        elif request.from_agent == "security" and request.to_agent == "support":
            if request.message.get("action") == "block_conversation":
                # Bloquer le syst√®me
                system_state["blocked"] = True
                system_state["block_reason"] = request.message.get("reason", "Security threat detected")
                system_state["threat_level"] = "danger"
                system_state["last_block_time"] = datetime.now().isoformat()
                
                logger.warning(f"üö´ Syst√®me bloqu√©: {system_state['block_reason']}")
                
                return {
                    "status": "acknowledged",
                    "action_taken": "conversation_blocked",
                    "timestamp": datetime.now().isoformat()
                }
        
        # Communication g√©n√©rale
        return {
            "status": "delivered",
            "from": request.from_agent,
            "to": request.to_agent,
            "message_processed": True,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur communication inter-agents: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# =============================================================================
# ROUTES DE BLOCAGE SYST√àME
# =============================================================================

@app.post("/api/cybersecurity/block")
async def block_system(request: SystemBlockRequest):
    """Bloque le syst√®me en cas de menace critique"""
    try:
        logger.warning(f"üö´ Blocage syst√®me demand√©: {request.reason}")
        
        # Mettre √† jour l'√©tat du syst√®me
        system_state["blocked"] = True
        system_state["block_reason"] = request.reason
        system_state["threat_level"] = "danger"
        system_state["last_block_time"] = datetime.now().isoformat()
        
        # Ajouter une alerte critique
        alert = {
            "id": f"block_{datetime.now().timestamp()}",
            "type": "system",
            "severity": request.severity,
            "message": f"Syst√®me bloqu√©: {request.reason}",
            "timestamp": datetime.now().isoformat(),
            "action_taken": "Syst√®me verrouill√© automatiquement",
            "user_session": request.session_id,
            "details": request.analysis
        }
        
        security_alerts.insert(0, alert)
        
        # Limiter √† 50 alertes en m√©moire
        if len(security_alerts) > 50:
            security_alerts = security_alerts[:50]
        
        return {
            "status": "blocked",
            "reason": request.reason,
            "timestamp": datetime.now().isoformat(),
            "system_state": system_state
        }
        
    except Exception as e:
        logger.error(f"Erreur blocage syst√®me: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/cybersecurity/unblock")
async def unblock_system():
    """D√©bloque le syst√®me"""
    try:
        logger.info("üîì D√©blocage syst√®me demand√©")
        
        system_state["blocked"] = False
        system_state["block_reason"] = None
        system_state["threat_level"] = "safe"
        system_state["last_block_time"] = None
        
        # Ajouter une alerte de d√©blocage
        alert = {
            "id": f"unblock_{datetime.now().timestamp()}",
            "type": "system",
            "severity": "medium",
            "message": "Syst√®me d√©bloqu√© par administrateur",
            "timestamp": datetime.now().isoformat(),
            "action_taken": "Acc√®s restaur√©",
            "user_session": "admin"
        }
        
        security_alerts.insert(0, alert)
        
        return {
            "status": "unblocked",
            "timestamp": datetime.now().isoformat(),
            "system_state": system_state
        }
        
    except Exception as e:
        logger.error(f"Erreur d√©blocage syst√®me: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# =============================================================================
# ROUTES D'ADMINISTRATION S√âCURIS√âE
# =============================================================================

def verify_admin_credentials(username: str, password: str) -> bool:
    """V√©rifie les identifiants administrateur"""
    # En production, utiliser un syst√®me d'authentification robuste
    admin_credentials = {
        "admin": "security123",
        "root": "admin123",
        "security": "security456"
    }
    return admin_credentials.get(username) == password

@app.post("/api/admin-security")
async def admin_security_panel(request: AdminRequest):
    """Panel d'administration s√©curis√©"""
    try:
        if request.action == "login":
            if not request.username or not request.password:
                raise HTTPException(status_code=400, detail="Username et password requis")
            
            if verify_admin_credentials(request.username, request.password):
                logger.info(f"‚úÖ Connexion admin r√©ussie: {request.username}")
                return {
                    "status": "authenticated",
                    "username": request.username,
                    "timestamp": datetime.now().isoformat(),
                    "permissions": ["read", "write", "block", "unblock"]
                }
            else:
                logger.warning(f"‚ùå Tentative connexion admin √©chou√©e: {request.username}")
                raise HTTPException(status_code=401, detail="Identifiants invalides")
        
        elif request.action == "block_system":
            logger.warning(f"üö´ Blocage manuel par admin: {request.reason}")
            
            system_state["blocked"] = True
            system_state["block_reason"] = request.reason or "Blocage manuel administrateur"
            system_state["threat_level"] = "danger"
            system_state["last_block_time"] = datetime.now().isoformat()
            
            return {
                "status": "system_blocked",
                "system_state": system_state,
                "timestamp": datetime.now().isoformat()
            }
        
        elif request.action == "unblock_system":
            logger.info("üîì D√©blocage manuel par admin")
            
            system_state["blocked"] = False
            system_state["block_reason"] = None
            system_state["threat_level"] = "safe"
            
            return {
                "status": "system_unblocked", 
                "system_state": system_state,
                "timestamp": datetime.now().isoformat()
            }
        
        elif request.action == "generate_report":
            # G√©n√©rer un rapport de s√©curit√©
            report = {
                "generated_at": datetime.now().isoformat(),
                "system_state": system_state,
                "security_summary": {
                    "total_alerts": len(security_alerts),
                    "critical_alerts": len([a for a in security_alerts if a.get("severity") == "critical"]),
                    "blocked_sessions": len([s for s in user_activities.values() if s.get("blocked", False)]),
                    "threat_level": system_state["threat_level"]
                },
                "recent_alerts": security_alerts[:10],
                "user_activities": list(user_activities.values())[:20]
            }
            
            return {
                "status": "report_generated",
                "report": report,
                "timestamp": datetime.now().isoformat()
            }
        
        else:
            raise HTTPException(status_code=400, detail=f"Action inconnue: {request.action}")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erreur admin panel: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/admin-security")
async def get_admin_data():
    """R√©cup√®re les donn√©es d'administration"""
    try:
        return {
            "system_state": system_state,
            "alerts": security_alerts[:20],  # 20 alertes les plus r√©centes
            "user_activities": [
                {
                    "session_id": session_id,
                    "messages_count": activity.get("messages_count", 0),
                    "last_activity": activity.get("last_activity", ""),
                    "threat_score": activity.get("threat_score", 0),
                    "blocked": activity.get("blocked", False),
                    "location": activity.get("location", "Unknown")
                }
                for session_id, activity in user_activities.items()
            ],
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Erreur r√©cup√©ration donn√©es admin: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# =============================================================================
# INCLUSION DES SOUS-MODULES
# =============================================================================

# Inclure les routes de l'agent agentic
try:
    from api.agentic_routes import router as agentic_router
    app.include_router(agentic_router, prefix="/api/agentic", tags=["Agent Support"])
    logger.info("‚úÖ Routes agent agentic charg√©es")
except ImportError as e:
    logger.error(f"‚ùå Impossible de charger les routes agentic: {e}")

# Inclure les routes de cybers√©curit√©
try:
    from api.cybersecurity_routes import router as cybersecurity_router
    app.include_router(cybersecurity_router, prefix="/api/cybersecurity", tags=["Cybers√©curit√©"])
    logger.info("‚úÖ Routes cybers√©curit√© charg√©es")
except ImportError as e:
    logger.error(f"‚ùå Impossible de charger les routes cybers√©curit√©: {e}")

# =============================================================================
# GESTION DES ERREURS GLOBALES
# =============================================================================

@app.exception_handler(404)
async def not_found_handler(request, exc):
    return JSONResponse(
        status_code=404,
        content={
            "error": "Endpoint non trouv√©",
            "message": f"L'endpoint {request.url.path} n'existe pas",
            "available_endpoints": [
                "/health", "/status", "/docs",
                "/api/agentic/chat", "/api/agentic/health",
                "/api/cybersecurity/analyze", "/api/cybersecurity/alerts",
                "/api/inter-agent/communicate", "/api/admin-security"
            ],
            "timestamp": datetime.now().isoformat()
        }
    )

@app.exception_handler(500)
async def internal_error_handler(request, exc):
    logger.error(f"Erreur interne: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Erreur interne du serveur",
            "message": "Une erreur inattendue s'est produite",
            "timestamp": datetime.now().isoformat()
        }
    )

# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

def add_security_alert(alert_type: str, severity: str, message: str, session_id: str = None, details: dict = None):
    """Ajoute une alerte de s√©curit√© globale"""
    alert = {
        "id": f"{alert_type}_{datetime.now().timestamp()}",
        "type": alert_type,
        "severity": severity,
        "message": message,
        "timestamp": datetime.now().isoformat(),
        "action_taken": "Alerte g√©n√©r√©e automatiquement",
        "user_session": session_id,
        "details": details
    }
    
    security_alerts.insert(0, alert)
    
    # Limiter la taille
    if len(security_alerts) > 100:
        security_alerts[:] = security_alerts[:100]
    
    # Mettre √† jour les statistiques
    system_state["total_threats_detected"] += 1
    
    # Ajuster le niveau de menace
    if severity == "critical":
        system_state["threat_level"] = "danger"
    elif severity == "high" and system_state["threat_level"] == "safe":
        system_state["threat_level"] = "warning"
    
    logger.warning(f"üö® Nouvelle alerte {severity}: {message}")

def update_user_activity(session_id: str, threat_score: float = 0.0, blocked: bool = False):
    """Met √† jour l'activit√© utilisateur"""
    if session_id not in user_activities:
        user_activities[session_id] = {
            "messages_count": 0,
            "first_activity": datetime.now().isoformat(),
            "threat_score": 0.0,
            "blocked": False,
            "location": "Unknown"
        }
    
    activity = user_activities[session_id]
    activity["messages_count"] += 1
    activity["last_activity"] = datetime.now().isoformat()
    activity["threat_score"] = max(activity["threat_score"], threat_score)
    activity["blocked"] = blocked or activity["blocked"]

# =============================================================================
# POINT D'ENTR√âE
# =============================================================================

if __name__ == "__main__":
    # Configuration des dossiers
    os.makedirs("logs", exist_ok=True)
    
    # Informations de d√©marrage
    logger.info("üöÄ D√©marrage NextGen-Agent API v7.0.0")
    logger.info("üì° Services disponibles:")
    logger.info("   ‚Ä¢ API Principale: http://localhost:8000")
    logger.info("   ‚Ä¢ Documentation: http://localhost:8000/docs")
    logger.info("   ‚Ä¢ Agent Support: http://localhost:8000/api/agentic/chat")
    logger.info("   ‚Ä¢ Cybers√©curit√©: http://localhost:8000/api/cybersecurity/analyze")
    logger.info("   ‚Ä¢ Communication Inter-Agents: http://localhost:8000/api/inter-agent/communicate")
    logger.info("   ‚Ä¢ Admin Panel: http://localhost:8000/api/admin-security")
    
    # D√©marrer le serveur
    uvicorn.run(
        "api.server:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info",
        access_log=True
    )